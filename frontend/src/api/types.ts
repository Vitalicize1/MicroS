/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/": {
    /** Health check */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Health"];
          };
        };
      };
    };
  };
  "/agent": {
    /** Run the agent workflow */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["AgentRequest"];
        };
      };
      responses: {
        /** @description Structured agent result */
        200: {
          content: {
            "application/json": components["schemas"]["AgentStructuredResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
        500: components["responses"]["ServerError"];
      };
    };
  };
  "/barcode/lookup": {
    /** Lookup foods by UPC */
    get: {
      parameters: {
        query: {
          upc: string;
        };
      };
      responses: {
        /** @description UPC lookup result */
        200: {
          content: {
            "application/json": {
              found?: boolean;
              message?: string | null;
              foods?: components["schemas"]["FoodCandidate"][];
            };
          };
        };
        400: components["responses"]["BadRequest"];
        500: components["responses"]["ServerError"];
      };
    };
  };
  "/users/{userId}/goals": {
    /** Get user micronutrient goals */
    get: {
      parameters: {
        path: {
          userId: components["parameters"]["UserId"];
        };
      };
      responses: {
        /** @description Goals map */
        200: {
          content: {
            "application/json": {
              goals?: {
                [key: string]: number;
              };
            };
          };
        };
        404: components["responses"]["NotFound"];
        500: components["responses"]["ServerError"];
      };
    };
    /** Upsert user micronutrient goals */
    put: {
      parameters: {
        path: {
          userId: components["parameters"]["UserId"];
        };
      };
      requestBody: {
        content: {
          "application/json": {
            goals: {
              [key: string]: number;
            };
          };
        };
      };
      responses: {
        /** @description Upserted */
        200: {
          content: {
            "application/json": {
              success?: boolean;
              goals?: {
                [key: string]: number;
              };
            };
          };
        };
        400: components["responses"]["BadRequest"];
        404: components["responses"]["NotFound"];
        500: components["responses"]["ServerError"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Health: {
      status?: string;
      message?: string;
      /** Format: date-time */
      timestamp?: string;
    };
    AgentRequest: {
      user_id: number;
      message: string;
    };
    FoodCandidate: {
      id?: number;
      name?: string;
      brand?: string | null;
      upc?: string | null;
      calories?: number | null;
      protein_g?: number | null;
      fat_g?: number | null;
      carbs_g?: number | null;
    };
    MealLog: {
      id?: number;
      user_id?: number;
      food_id?: number;
      grams?: number;
      meal_type?: string;
      /** Format: date-time */
      logged_at?: string;
      food_name?: string | null;
    };
    DaySummary: {
      date?: string;
      meal_count?: number;
      totals?: {
        [key: string]: number;
      };
      meals?: {
          [key: string]: unknown;
        }[];
    };
    RecommendationItem: {
      food_id?: number;
      name?: string;
      brand?: string | null;
      coverage?: {
        [key: string]: number;
      };
      calories_per_100g?: number | null;
    };
    AgentStructuredResponse: {
      ok?: boolean;
      intent?: string | null;
      message?: string;
      confidence?: number;
      needs_clarification?: boolean;
      questions?: string[];
      candidates?: components["schemas"]["FoodCandidate"][];
      selected?: components["schemas"]["FoodCandidate"] | null;
      log_result?: components["schemas"]["MealLog"] | null;
      day_summary?: components["schemas"]["DaySummary"] | null;
      recommendations?: components["schemas"]["RecommendationItem"][];
      state?: {
        [key: string]: unknown;
      };
    };
    Error: {
      error?: string;
    };
  };
  responses: {
    /** @description Bad request */
    BadRequest: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Not found */
    NotFound: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Server error */
    ServerError: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
  };
  parameters: {
    UserId: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
